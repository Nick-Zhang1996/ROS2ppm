#include <Arduino.h>
#include <ros.h>
#include <std_msgs/Float64.h>
// XXX message type here
//#include <rc_vip/CarSensors.h>

#define LED_PIN 13

//ros variables
//pub,sub, in_buf, out_buf
ros::NodeHandle_<ArduinoHardware, 2, 2, 128, 300 > nh;

bool failsafe = false;

void readCarControlTopic(const rc_vip::CarControl& msg_CarControl) {
    carControlTimestamp = millis();
    newCarControlMsg = true;

    if (msg_CarControl.throttle < 0.001 || msg_CarControl.throttle > 1.0001) {
        //throttleServoVal = minThrottleVal;
        disablePWM();
        failsafe = true;
        digitalWrite(LED_PIN, LOW);
    } else {
        //needs a re-calibration
        //throttleServoVal = (int) map( msg_CarControl.throttle, 0.0, 1.0, 1460, 1450);

        // this works only when PWM is enabled
        // so failsafe can override this function
        setHbridgePower(msg_CarControl.throttle);
    }
    // COMMENT THIS OUT for moving motor
    //throttleServoVal = minThrottleVal;

    float tempSteering = constrain(msg_CarControl.steer_angle, steeringLeftLimit, steeringRightLimit);
    if ( tempSteering > 0.0 ){
        steeringServoVal = (int) map(tempSteering, 0.0, steeringRightLimit, midPointSteeringServo, rightBoundrySteeringServo);
    } else if ( tempSteering < 0.0 ){
        steeringServoVal = (int) map(tempSteering, 0.0, steeringLeftLimit, midPointSteeringServo, leftBoundrySteeringServo);
    } else {
        steeringServoVal = 1550;
    }
    steer.writeMicroseconds(steeringServoVal);

    return;
}


ros::Subscriber<rc_vip::CarControl> subCarControl("rc_vip/CarControl", &readCarControlTopic);
rc_vip::CarSensors carSensors_msg;
ros::Publisher pubCarSensors("rc_vip/CarSensors", &carSensors_msg);

void setup() {
    nh.initNode();
    nh.advertise(pubCarSensors);
    nh.subscribe(subCarControl);

    while (!nh.connected())
        nh.spinOnce();

    //pinMode(pinDrive, OUTPUT);
    pinMode(pinServo, OUTPUT);
    //throttle.attach(pinDrive);
    steer.attach(pinServo);
   
    //throttle.writeMicroseconds(minThrottleVal);
    delay(500);
    OCR2A = 25;
    enablePWM();
}

void loop() {

    nh.spinOnce();
}
